#if defined(_MSC_VER)
#pragma once
#endif
#ifndef __USTL_CORE_CONCEPT__
#define __USTL_CORE_CONCEPT__

#ifndef __USTL_CORE_INTERNAL_TYPE_INTEGER_HPP__
#include <ustl/core/internal/type_traits/tt_integer.hpp>
#endif

#ifndef __USTL_CORE_INTERNAL_TYPETRAITS_POINTER_HPP__ 
#include <ustl/core/internal/type_traits/tt_pointer.hpp>
#endif


namespace ustl
{
namespace core
{

    template <typename _Base, typename _Derived>
    concept IsBaseOf = requires (_Derived *pt, _Derived &rt)
    {
        { static_cast<_Base *>(pt) };
        { static_cast<_Base &>(rt) };
    };


    template <typename _Callable, typename ..._Args>
    concept IsCallable = requires (_Callable f, _Args &&...args) 
    {
        f(args...);
    };


    template <typename _T>
    concept IsInteger = requires (_T t)
    {
        { internal::IsInteger<_T>::value == true };
    };


    template <typename _T>
    concept IsPointer = requires (_T t)
    {
        { internal::IsPointer<_T>::value == true };
    };


    template <typename _From, typename _To>
    concept IsConvertiable = requires (_From f, _To t) 
    {
        { t = static_cast<_To>(f) };
    };


    template <typename _Recv, typename Conv>
    concept IsMoveAssign = requires (_Recv r, Conv c)
    {
        { r = static_cast<Conv &&>(c) };
    };


    template <typename _Recv, typename Conv>
    concept IsCopyAssign = requires (_Recv r, Conv c)
    {
        { r = static_cast<Conv const &>(c) };
    };


    template <typename Container>
    concept IsSequenceContainer = requires (Container r, typename Container::val_type t)
    {
        r.push_front(t);
        r.push_back(t);
        r.pop_front();
        r.pop_back();
        r.front();
        r.back();
    };


    template <typename Container>
    concept IsContiguousContainer = requires (Container r, typename Container::val_type t)
    {
        r.begin();
    };


    template <typename Container>
    concept IsReversibleContainer = requires (Container r)
    {
        { r.begin() };
    };


    template <typename Container>
    concept IsAssociativeContainer = requires (Container r)
    {
        { r.begin() };
    };

    
    template <typename Container>
    concept IsAllocatorAwareContainer = requires (Container r)
    {
        { r.begin() };
    };


    template <typename Container>
    concept IsUnorderedAssociativeContainer = requires (Container r)
    {
        { r.begin() };
    };

} // namespace ustl::core
} // namespace ustl



#endif