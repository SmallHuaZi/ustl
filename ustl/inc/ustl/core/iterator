#if defined(_MSC_VER)
#pragma once
#endif
#ifndef __USTL_CORE_ITERATOR__
#define __USTL_CORE_ITERATOR__

#ifndef __USTL__
#include <ustl/ustl>
#endif

#include <ustl/core/internal/iterator/itr_category.hpp>
#include <ustl/core/internal/iterator/itr_traits.hpp>
#include <ustl/core/internal/iterator/itr_list_iter.hpp>
#include <ustl/core/internal/iterator/itr_tree_iter.hpp>
#include <ustl/core/internal/iterator/itr_slice_iter.hpp>
#include <ustl/core/internal/iterator/itr_helper.hpp>

namespace ustl
{
namespace core
{

    using  internal::iterator::input_iter_category;
    using  internal::iterator::output_iter_category;
    using  internal::iterator::forward_iter_category;
    using  internal::iterator::bothway_iter_category;
    using  internal::iterator::random_iter_category;

    template <typename Iter>
    using iter_traits = internal::iterator::IterTraits<Iter>;

    template <typename T>
    using list_iter = internal::iterator::ListIter<T>;

    template <typename T>
    using tree_iter = internal::iterator::TreeIter<T>;

    template <typename T>
    using slice_iter = internal::iterator::SliceIter<T>;

    template <typename Iter>
    using iter_op_le = internal::iterator::IterOpLe<Iter>;

    template <typename Iter>
    using iter_op_lt = internal::iterator::IterOpLt<Iter>;

    template <typename Iter>
    using iter_op_ge = internal::iterator::IterOpGe<Iter>;

    template <typename Iter>
    using iter_op_gt = internal::iterator::IterOpGt<Iter>;

    template <typename Iter>
    using iter_op_eq = internal::iterator::IterOpEq<Iter>;

    template <typename Iter>
    using iter_op_ne = internal::iterator::IterOpNe<Iter>;

    template <typename Iter, typename Compare>
    using iter_op_cmp = internal::iterator::IterOpCmp<Iter, Compare>;

    template <typename Iter, typename Compare>
    using iter_op_rev = internal::iterator::IterOpReverse<Iter, Compare>;

    template <typename Iter>
    USTL_CONSTEXPR bool const is_iter_v = internal::iterator::IsIter<Iter>::value;

    template <typename Iter>
    USTL_CONSTEXPR bool const is_input_iter_v = internal::iterator::IsInputIter<Iter>::value;

    template <typename Iter>
    USTL_CONSTEXPR bool const is_output_iter_v = internal::iterator::IsOutputIter<Iter>::value;

    template <typename Iter>
    USTL_CONSTEXPR bool const is_forward_iter_v = internal::iterator::IsForwardIter<Iter>::value;

    template <typename Iter>
    USTL_CONSTEXPR bool const is_bothway_iter_v = internal::iterator::IsBothwayIter<Iter>::value;

    template <typename Iter>
    USTL_CONSTEXPR bool const is_random_iter_v = internal::iterator::IsRandomIter<Iter>::value;

} // namespace ustl::core
} // namespace ustl 


#endif